/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface HiLoLobbyInterface extends utils.Interface {
  functions: {
    "buyIn()": FunctionFragment;
    "collect()": FunctionFragment;
    "currentState()": FunctionFragment;
    "endGame()": FunctionFragment;
    "playerCount()": FunctionFragment;
    "roll()": FunctionFragment;
    "rollResultCount()": FunctionFragment;
    "rollSize()": FunctionFragment;
    "startGame()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "buyIn", values?: undefined): string;
  encodeFunctionData(functionFragment: "collect", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rollResultCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rollSize", values?: undefined): string;
  encodeFunctionData(functionFragment: "startGame", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rollResultCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rollSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;

  events: {
    "AllPlayersRolled(uint256)": EventFragment;
    "GameStarted(uint256)": EventFragment;
    "NewBuyIn(address)": EventFragment;
    "NewLobbyState(uint8)": EventFragment;
    "PlayerCollected(address,uint256)": EventFragment;
    "PlayerRoll(address,uint256)": EventFragment;
    "Tie(address[])": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllPlayersRolled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBuyIn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLobbyState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerRoll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Tie"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type AllPlayersRolledEvent = TypedEvent<
  [BigNumber],
  { _numOfPlayers: BigNumber }
>;

export type AllPlayersRolledEventFilter =
  TypedEventFilter<AllPlayersRolledEvent>;

export type GameStartedEvent = TypedEvent<
  [BigNumber],
  { totalPlayers: BigNumber }
>;

export type GameStartedEventFilter = TypedEventFilter<GameStartedEvent>;

export type NewBuyInEvent = TypedEvent<[string], { _from: string }>;

export type NewBuyInEventFilter = TypedEventFilter<NewBuyInEvent>;

export type NewLobbyStateEvent = TypedEvent<[number], { _state: number }>;

export type NewLobbyStateEventFilter = TypedEventFilter<NewLobbyStateEvent>;

export type PlayerCollectedEvent = TypedEvent<
  [string, BigNumber],
  { _from: string; value: BigNumber }
>;

export type PlayerCollectedEventFilter = TypedEventFilter<PlayerCollectedEvent>;

export type PlayerRollEvent = TypedEvent<
  [string, BigNumber],
  { _from: string; value: BigNumber }
>;

export type PlayerRollEventFilter = TypedEventFilter<PlayerRollEvent>;

export type TieEvent = TypedEvent<[string[]], { _winners: string[] }>;

export type TieEventFilter = TypedEventFilter<TieEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; amount: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface HiLoLobby extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HiLoLobbyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyIn(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentState(overrides?: CallOverrides): Promise<[number]>;

    endGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    playerCount(overrides?: CallOverrides): Promise<[number]>;

    roll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rollResultCount(overrides?: CallOverrides): Promise<[number]>;

    rollSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    startGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyIn(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collect(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentState(overrides?: CallOverrides): Promise<number>;

  endGame(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  playerCount(overrides?: CallOverrides): Promise<number>;

  roll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rollResultCount(overrides?: CallOverrides): Promise<number>;

  rollSize(overrides?: CallOverrides): Promise<BigNumber>;

  startGame(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyIn(overrides?: CallOverrides): Promise<void>;

    collect(overrides?: CallOverrides): Promise<void>;

    currentState(overrides?: CallOverrides): Promise<number>;

    endGame(overrides?: CallOverrides): Promise<void>;

    playerCount(overrides?: CallOverrides): Promise<number>;

    roll(overrides?: CallOverrides): Promise<void>;

    rollResultCount(overrides?: CallOverrides): Promise<number>;

    rollSize(overrides?: CallOverrides): Promise<BigNumber>;

    startGame(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AllPlayersRolled(uint256)"(
      _numOfPlayers?: null
    ): AllPlayersRolledEventFilter;
    AllPlayersRolled(_numOfPlayers?: null): AllPlayersRolledEventFilter;

    "GameStarted(uint256)"(totalPlayers?: null): GameStartedEventFilter;
    GameStarted(totalPlayers?: null): GameStartedEventFilter;

    "NewBuyIn(address)"(_from?: string | null): NewBuyInEventFilter;
    NewBuyIn(_from?: string | null): NewBuyInEventFilter;

    "NewLobbyState(uint8)"(
      _state?: BigNumberish | null
    ): NewLobbyStateEventFilter;
    NewLobbyState(_state?: BigNumberish | null): NewLobbyStateEventFilter;

    "PlayerCollected(address,uint256)"(
      _from?: string | null,
      value?: null
    ): PlayerCollectedEventFilter;
    PlayerCollected(
      _from?: string | null,
      value?: null
    ): PlayerCollectedEventFilter;

    "PlayerRoll(address,uint256)"(
      _from?: string | null,
      value?: null
    ): PlayerRollEventFilter;
    PlayerRoll(_from?: string | null, value?: null): PlayerRollEventFilter;

    "Tie(address[])"(_winners?: string[] | null): TieEventFilter;
    Tie(_winners?: string[] | null): TieEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    buyIn(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentState(overrides?: CallOverrides): Promise<BigNumber>;

    endGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    playerCount(overrides?: CallOverrides): Promise<BigNumber>;

    roll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rollResultCount(overrides?: CallOverrides): Promise<BigNumber>;

    rollSize(overrides?: CallOverrides): Promise<BigNumber>;

    startGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyIn(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    playerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rollResultCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
